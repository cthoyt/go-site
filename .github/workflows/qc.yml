# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_yaml_and_metadata:
    runs-on: ubuntu-latest
    container: geneontology/dev-base:latest
    steps:
    - uses: actions/checkout@v2
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
    # - name: Set up Ruby
    #   uses: ruby/setup-ruby@ec106b438a1ff6ff109590de34ddc62c540232e0
    #   with:
    #     ruby-version: 2.2.10
    - name: Install packages
      run: apt-get update -qq && apt-get install -y kwalify python3 python3-pip mmv -qq
    - name: Install python stuff
      run: pip install pyyaml typing graphstore/rule-runner
    ## Users.
    - name: Test users schema.
      run: kwalify -E -m metadata/users.schema.yaml
    - name: Test users metadata.
      run: kwalify -E -f metadata/users.schema.yaml metadata/users.yaml
    ## Groups.
    - name: Test groups schema.
      run: kwalify -E -m metadata/groups.schema.yaml
    - name: Test groups metadata.
      run: kwalify -E -f metadata/groups.schema.yaml metadata/groups.yaml
    ## DB Xrefs.
    - name: Test dbxrefs schema.
      run: kwalify -E -m metadata/db-xrefs.schema.yaml
    - name: Test dbxrefs metadata.
      run: kwalify -E -f metadata/db-xrefs.schema.yaml metadata/db-xrefs.yaml
    ## Datasets.
    - name: Test datasets schema.
      run: kwalify -E -m metadata/datasets.schema.yaml
    - name: Test datasets metadata.
      run: kwalify -E -f metadata/datasets.schema.yaml metadata/datasets/*.yaml
    ## Extension constraints.
    - name: Test extension constraints schema.
      run: kwalify -E -m metadata/extensions-constraints.schema.yaml
    - name: Test extension constraints metadata.
      run: kwalify -E -f metadata/extensions-constraints.schema.yaml metadata/extensions-constraints.yaml
    ## GO reference species set.
    - name: Test reference species set schema.
      run: kwalify -E -m metadata/go-reference-species.schema.yaml
    - name: Test reference species set metadata.
      run: kwalify -E -f metadata/go-reference-species.schema.yaml metadata/go-reference-species.yaml
    ## Cross-test metadata
    - name: Cross-test users and groups.
      run: python3 ./scripts/sanity-check-users-and-groups.py --verbose --users metadata/users.yaml --groups metadata/groups.yaml
    - name: Info
      run: which sparta

  # ## Reuse sparta to check non-go-rules files that are still
  # ## structured yamldown/frontmatter.
  # validation_other:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   container: geneontology/dev-base:latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2
  #     - name: Info 0
  #       run: whoami
  #     - name: Prep 0
  #       run: apt-get -u install mmv
  #     - name: Prep 1
  #       run: mkdir -p /tmp/foo && mcp 'metadata/gorefs/goref-0000*' '/tmp/foo/gorule-0000#1'
  #     - name: Info 0
  #       run: ls -AlF; pwd
  #     - name: Run SPARTA
  #       run: sparta valid --rules /tmp/foo/ --schema metadata/gorefs.schema.yaml
  #     - name: Prep 2
  #       run: pip3 install -r pipeline/requirements.txt && ./scripts/rule-example-validation.sh
